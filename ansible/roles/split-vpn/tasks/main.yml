---
# tasks file for split-vpn

- name: Ensure download directory is present
  ansible.builtin.file:
    path: "{{ splitvpn_download_dir }}"
    state: directory
    mode: 0644

- name: Download the split-vpn script
  ansible.builtin.get_url:
    url: https://raw.githubusercontent.com/peacey/split-vpn/main/vpn/install-split-vpn.sh
    dest: "{{ splitvpn_download_dir }}/install-split-vpn.sh"

- name: Execute the split-vpn script
  ansible.builtin.shell: sh "{{ splitvpn_download_dir }}/install-split-vpn.sh"
  args:
    chdir: "{{ splitvpn_download_dir }}"
    creates: /data/split-vpn/run-vpn.sh
  register: script_output
  ignore_errors: true
## TODO: Check if /etc/split-vpn is linked to /data/split-vpn before continuing

- name: Check if modprobe wireguard runs successfully
  ansible.builtin.command: modprobe wireguard
  ignore_errors: true
  register: modprobe_output

- name: Display the output of modprobe command
  ansible.builtin.debug:
    var: modprobe_output
## TODO: Check if modprobe_output has no errors before continuing

- name: Set persistent fact if modprobe succeeded
  ansible.builtin.set_fact:
    wireguard_loaded: true
  when: modprobe_output.rc == 0

- name: Run 'wg-quick' command and capture the output
  ansible.builtin.shell: wg-quick 2>&1
  register: wg_quick_output
  failed_when: "'Usage: wg-quick' not in wg_quick_output.stdout"

- name: Display the output of wg-quick command
  ansible.builtin.debug:
    var: wg_quick_output.stdout
## TODO: Check if wgquick_output has no errors before continuing

- name: Set persistent fact if wg-quick succeeded
  ansible.builtin.set_fact:
    wgquick_loaded: true
  when: "'Usage: wg-quick' in wg_quick_output.stdout"

- name: Ensure Protonvpn directory is present
  ansible.builtin.file:
    path: "{{ protonvpn_dir }}"
    state: directory
    mode: 0644

#- name: Copy vpn.conf.sample to vpn.conf
#  ansible.builtin.copy:
#    src: "{{ base_dir }}/vpn/vpn.conf.sample"
#    remote_src: true
#    dest: "{{ protonvpn_dir }}/vpn.conf"

- name: Copy proton.conf template to proton.conf
  ansible.builtin.template:
    src: proton.conf.j2
    dest: "{{ protonvpn_dir }}/proton.conf"

- name: Copy vpn.conf template to vpn.conf
  ansible.builtin.template:
    src: vpn.conf.j2
    dest: "{{ protonvpn_dir }}/vpn.conf"

- name: Copy run-vpn.sh to server
  ansible.builtin.copy:
    src: run-vpn.sh
    dest: "{{ protonvpn_dir }}/run-vpn.sh"
    mode: "755"

- name: Copy run-all-vpn.sh to server
  ansible.builtin.copy:
    src: run-all-vpn.sh
    dest: "{{ base_dir }}/run-vpn.sh"
    mode: "755"

- name: Copy service unit file
  ansible.builtin.copy:
    src: ../../../examples/boot/run-vpn.service
    dest: /etc/systemd/system/run-vpn.service

- name: Reload Systemd daemon
  ansible.builtin.shell: systemctl daemon-reload

- name: Enable run-vpn service
  ansible.builtin.shell: systemctl enable run-vpn

- name: Start run-vpn service
  ansible.builtin.shell: systemctl start run-vpn
